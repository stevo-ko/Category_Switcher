name: Release Category_Switcher

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Version auslesen f√ºr Release-Name
      - name: Read version
        id: version
        shell: pwsh
        run: |
          $json = Get-Content -Raw Version.json | ConvertFrom-Json
          $program = $json.program_version
          $settings = $json.settings_version
          $releaseName = "Category Switcher Version $program & Settingsmenu $settings"
          "release_name=$releaseName" >> $env:GITHUB_OUTPUT

      # 3Ô∏è‚É£ Alte ZIPs l√∂schen (falls vorhanden)
      - name: Cleanup old ZIPs
        shell: pwsh
        run: |
          Remove-Item "Category_Switcher.zip","Category_Switcher Source.zip" -ErrorAction SilentlyContinue

      # 4Ô∏è‚É£ Funktion zum Kopieren von Ordnern/Dateien
      - name: Define copy function
        shell: pwsh
        run: |
          function Copy-Content($items, $target) {
              foreach ($item in $items) {
                  if (Test-Path $item) {
                      Copy-Item -Recurse -Force $item "$target\$item"
                  }
              }
          }

      # 5Ô∏è‚É£ Category_Switcher.zip erstellen
      - name: Pack Category_Switcher.zip
        shell: pwsh
        run: |
          $tempDir = "ReleasePackage"
          New-Item -ItemType Directory -Path $tempDir

          Copy-Content @("Release EXE","Resources") $tempDir
          Copy-Content @("Version.json","settings.xaml","Changelog.md") $tempDir

          Compress-Archive -Path "$tempDir\*" -DestinationPath "Category_Switcher.zip" -Force
          Remove-Item -Recurse -Force $tempDir

      # 6Ô∏è‚É£ Category_Switcher Source.zip erstellen
      - name: Pack Category_Switcher Source.zip
        shell: pwsh
        run: |
          $tempDir = "SourcePackage"
          New-Item -ItemType Directory -Path $tempDir

          Copy-Content @("Resources") $tempDir
          Copy-Content @("Version.json","settings.xaml","Changelog.md","Category_Switcher.py") $tempDir

          Compress-Archive -Path "$tempDir\*" -DestinationPath "Category_Switcher Source.zip" -Force
          Remove-Item -Recurse -Force $tempDir

      # 7Ô∏è‚É£ Changelog f√ºr aktuellen Tag auslesen
      - name: Extract changelog for current tag
        id: changelog
        shell: pwsh
        run: |
          $tag = "${GITHUB_REF##*/}"   # z.B. v2.0-Sv1.0
          $lines = Get-Content Changelog.md
          $pattern = "^\#\#.*\*\*$tag(\s*\(.*\))?"
          $startLine = ($lines | Select-String -Pattern $pattern | Select-Object -First 1)

          if (-not $startLine) {
          $changelog = @"
          ## :small_blue_diamond: **$tag (DE)**
          ### üõ†Ô∏è Fixes
          - Kleine Fehlerbehebungen

          ## :small_blue_diamond: **$tag (EN)**
          ### üõ†Ô∏è Fixes
          - Minor fixes
          "@
          } else {
              $start = $startLine.LineNumber - 1
              $next = ($lines[($start+1)..($lines.Length-1)] | Select-String -Pattern '^\#\#\s+:small_blue_diamond:' | Select-Object -First 1)
              if ($next) { $end = $next.LineNumber - 2 } else { $end = $lines.Length - 1 }
              $changelogLines = $lines[$start..$end]
              $changelog = ($changelogLines -join "`n").Trim()
          }

          Write-Output "changelog<<EOF" >> $env:GITHUB_OUTPUT
          Write-Output "$changelog" >> $env:GITHUB_OUTPUT
          Write-Output "EOF" >> $env:GITHUB_OUTPUT

      # 8Ô∏è‚É£ GitHub Release erstellen
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ steps.version.outputs.release_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            Category_Switcher.zip
            Category_Switcher Source.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
